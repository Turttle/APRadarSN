<?xml version="1.0"?>
<doc>
<assembly>
<name>
RadarControls
</name>
</assembly>
<members>
<member name="P:RadarControls.RadarSettings.ShowHP">
	<summary>
 Show the mobs HP percentage next to their name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:RadarControls.RadarSettings.ShowAll">
	<summary>
 Show all mobs, including dead or invisible mobs
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:RadarControls.RadarSettings.ShowId">
	<summary>
 Show the mobs id next to their name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:RadarControls.RadarSettings.ShowCompass">
	<summary>
 Show the compass on the radar
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:RadarControls.RadarSettings.ShowDistance">
	<summary>
 Show the distance to the mob from your position on the radar
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:RadarControls.RadarSettings.HideOtherFloors">
	<summary>
 Hides mobs that are on other floors
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:RadarControls.RadarSettings.BlipSize">
	<summary>
 Gets or sets the size of the blips on the radar
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:RadarControls.RadarSettings.RefreshRate">
	<summary>
 Sets the data refresh rate for the radar
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:RadarControls.RadarSettings.DrawLineToTarget">
	<summary>
 Draw a line on the radar to the current target
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:RadarControls.RadarSettings.ShowSight">
	<summary>
 Shows or hides the sight cone for each mob
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.Radar_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
	<summary>
 Paint method for the radar, This is where we will be doing all of our painting work
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.PaintMappedRadar(System.Drawing.Graphics)">
	<summary>
 Paint method for the mapped radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.PaintMap(System.Drawing.Graphics)">
	<summary>
 Paints the map on the background of the control
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.PaintOverlayRadar(System.Drawing.Graphics)">
	<summary>
 Paint method for painting the overlay radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.PaintHeaderInfo(System.Drawing.Graphics)">
	<summary>
 Paints the current zone information on the radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.PaintMobData(System.Drawing.Graphics,FFXIMemory.MobData,System.Int32,System.Boolean)">
	<summary>
 Paints the mob data pane on the window
 </summary>
	<param name="g">the graphics object used for painting</param>
	<param name="Target">The mob Name</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.PaintCompass(System.Drawing.Graphics)">
	<summary>
 Paints the compass on the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.PaintMyPointer(System.Drawing.Graphics)">
	<summary>
 Paints the triangle for player position in the center of the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.PaintMob(System.Drawing.Graphics,FFXIMemory.MobData)">
	<summary>
 Paints a mob on the radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<param name="Mob">The mob data to be painted</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.PaintRange(System.Drawing.Graphics,System.Single,System.Drawing.Pen)">
	<summary>
 Paints a range on the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<param name="Range">The radius of the range</param>
	<param name="pen">The pen used for drawing the line</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.GetDisplayText(FFXIMemory.MobData)">
	<summary>
 Gets the mob display text
 </summary>
	<param name="mob">The mob object containig the data</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.GetTargetInfo">
	<summary>
 Gets your current target's data
 </summary>
	<returns>MobData class contianing all the target's info</returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.BuildMobInfo(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Builds the mobs display info
 </summary>
	<param name="mob">The mob object used to get the display info</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.BuildMobInfo(DataLibrary.ApRadarDataSet.MobsRow,System.String)">
	<summary>
 Builds the mobs display info
 </summary>
	<param name="mob">The mob object used to get the display info</param>
	<param name="ClaimedBy">The id of the persont that has the mob claimed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.GetBehavior(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Gets the behavior string for the current target
 </summary>
	<param name="Mob"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.GetDetection(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Builds the detection string for the current target
 </summary>
	<param name="Mob"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.GetClaimedBy(System.Int32)">
	<summary>
 Gets the name of the player that has the mob claimed
 </summary>
	<param name="ClaimID">The ServerID of the player with claim</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.CheckMap">
	<summary>
 Checks for the appropriate map image based on your 
 current coordinates.
 </summary>
	<remarks>This function relies on the map.ini</remarks>
</member><member name="M:RadarControls.AlphaRadar.SerializeSettings(System.String)">
	<summary>
 Serializes the radar settings to a file
 </summary>
	<param name="Path">The path to the setttings file</param>
	<remarks>If the file does not exist it will be created and
 if it does exist it will be overwritten</remarks>
</member><member name="M:RadarControls.AlphaRadar.DeserializeSettings(System.String)">
	<summary>
 Deserializes the radar settings from a file
 </summary>
	<param name="Path">The path of the settings file</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.InitializeRadar">
	<summary>
 Initializes the radar starting the scan
 </summary>
	<remarks>This must be called when the radar is started</remarks>
</member><member name="M:RadarControls.AlphaRadar.SaveSettings">
	<summary>
 Saves the settings to the default path
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.SaveSettings(System.String)">
	<summary>
 Saves the settings to the path specified
 </summary>
	<param name="Path"></param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.LoadSettings">
	<summary>
 Loads the settings from the default path
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.LoadSettings(System.String)">
	<summary>
 Loads the setting from the path specified
 </summary>
	<param name="Path"></param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.Settings_RefreshChanged">
	<summary>
 Event that is fired when the Refresh rate is changed in the settings
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadar.MobScanner">
	<summary>
 Mob scanning thread
 </summary>
	<remarks></remarks>
</member><member name="P:RadarControls.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:RadarControls.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:RadarControls.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:RadarControls.FFXIImageMap.XScale">
	<summary>Gets the X zone scale.</summary>
</member><member name="P:RadarControls.FFXIImageMap.XOffset">
	<summary>Gets the X offset to place map from zone center.</summary>
</member><member name="P:RadarControls.FFXIImageMap.YScale">
	<summary>Gets the Y zone scale.</summary>
</member><member name="P:RadarControls.FFXIImageMap.YOffset">
	<summary>Gets the Y offset to place map from zone center.</summary>
</member><member name="P:RadarControls.FFXIImageMap.MapID">
	<summary>Gets the map id of this map image.</summary>
</member><member name="P:RadarControls.FFXIImageMap.Bounds">
	<summary>Retrieve the image boundaries in MAP coordinates.</summary>
</member><member name="M:RadarControls.FFXIImageMap.CheckBounds(System.Drawing.RectangleF)">
	<summary>Checks the given box againt the current map boundaries and expands it as necessary.</summary>
</member><member name="M:RadarControls.FFXIImageMap.CheckBatch(System.Single,System.Single)">
	<summary>Checks the given point against the current map boundaries and expands it as necessary as part of a batch. Use CheckBatchend when finished.</summary>
</member><member name="M:RadarControls.FFXIImageMap.CheckBatchEnd">
	<summary>Recalculates the current map boundaries after checking points in batch.</summary>
</member><member name="M:RadarControls.FFXIImageMap.ClearCache">
	<summary>Releases cached image data for the map.</summary>
</member><member name="M:RadarControls.RadarBase.PaintMob(System.Drawing.Graphics,FFXIMemory.MobData)">
	<summary>
 Paints a mob on the radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<param name="Mob">The mob data to be painted</param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.InitializeRadar">
	<summary>
 Initializes the radar starting the scan
 </summary>
	<remarks>This must be called when the radar is started</remarks>
</member><member name="M:RadarControls.RadarBase.SaveSettings(System.String)">
	<summary>
 Saves the settings to the path specified
 </summary>
	<param name="Path"></param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.LoadSettings(System.String)">
	<summary>
 Loads the setting from the path specified
 </summary>
	<param name="Path"></param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.GetDisplayText(FFXIMemory.MobData)">
	<summary>
 Gets the mob display text
 </summary>
	<param name="mob">The mob object containig the data</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.GetTargetInfo">
	<summary>
 Gets your current target's data
 </summary>
	<returns>MobData class contianing all the target's info</returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.BuildMobInfo(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Builds the mobs display info
 </summary>
	<param name="mob">The mob object used to get the display info</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.BuildMobInfo(DataLibrary.ApRadarDataSet.MobsRow,System.String)">
	<summary>
 Builds the mobs display info
 </summary>
	<param name="mob">The mob object used to get the display info</param>
	<param name="ClaimedBy">The id of the persont that has the mob claimed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.GetBehavior(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Gets the behavior string for the current target
 </summary>
	<param name="Mob"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.GetDetection(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Builds the detection string for the current target
 </summary>
	<param name="Mob"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.GetClaimedBy(System.Int32)">
	<summary>
 Gets the name of the player that has the mob claimed
 </summary>
	<param name="ClaimID">The ServerID of the player with claim</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.SerializeSettings(System.String)">
	<summary>
 Serializes the radar settings to a file
 </summary>
	<param name="Path">The path to the setttings file</param>
	<remarks>If the file does not exist it will be created and
 if it does exist it will be overwritten</remarks>
</member><member name="M:RadarControls.RadarBase.DeserializeSettings(System.String)">
	<summary>
 Deserializes the radar settings from a file
 </summary>
	<param name="Path">The path of the settings file</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.WordWrap(System.String)">
	<summary>
 Wraps a long string to fit in the radar info viewer
 </summary>
	<param name="text">The string to wrap</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.CampedMobExists(System.Int32)">
	<summary>
 Checks to see if a camped mob exists in the list
 </summary>
	<param name="MobServerID">The Server ID of the mob to check</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarBase.CheckFilter(RadarControls.RadarSettings.FilterType,System.String,System.Int32,System.String[])">
	<summary>
 Checks a mobs name against the specified filter and type
 </summary>
	<param name="FilterType">The type of filter to check for</param>
	<param name="MobName">The name of the mob</param>
	<param name="MobID">The mobs id</param>
	<param name="Filters">The filters to check against</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.GraphicsEngine.DeserializeSettings(System.String)">
	<summary>
 Deserializes the radar settings from a file
 </summary>
	<param name="Path">The path of the settings file</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.GraphicsEngine.PaintMyPointer(System.Drawing.Graphics,RadarControls.GraphicsEngine.RadarType)">
	<summary>
 Paints the triangle for player position in the center of the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.GraphicsEngine.PaintRange(System.Drawing.Graphics,System.Single,System.Drawing.Pen,RadarControls.GraphicsEngine.RadarType)">
	<summary>
 Paints a range on the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<param name="Range">The radius of the range</param>
	<param name="pen">The pen used for drawing the line</param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.RenderRadar(System.Drawing.Graphics)">
	<summary>
 Paint method for the radar, This is where we will be doing all of our painting work
 </summary>
	<param name="g">The graphics object used for the rendering</param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.PaintMappedRadar(System.Drawing.Graphics)">
	<summary>
 Paint method for the mapped radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.PaintMap(System.Drawing.Graphics)">
	<summary>
 Paints the map on the background of the control
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.PaintOverlayRadar(System.Drawing.Graphics)">
	<summary>
 Paint method for painting the overlay radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.PaintHeaderInfo(System.Drawing.Graphics)">
	<summary>
 Paints the current zone information on the radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.PaintMobData(System.Drawing.Graphics,FFXIMemory.MobData,System.Int32,System.Boolean)">
	<summary>
 Paints the mob data pane on the window
 </summary>
	<param name="g">the graphics object used for painting</param>
	<param name="Target">The mob Name</param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.PaintCompass(System.Drawing.Graphics)">
	<summary>
 Paints the compass on the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.PaintMyPointer(System.Drawing.Graphics)">
	<summary>
 Paints the triangle for player position in the center of the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.PaintMob(System.Drawing.Graphics,FFXIMemory.MobData)">
	<summary>
 Paints a mob on the radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<param name="Mob">The mob data to be painted</param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.PaintRange(System.Drawing.Graphics,System.Single,System.Drawing.Pen)">
	<summary>
 Paints a range on the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<param name="Range">The radius of the range</param>
	<param name="pen">The pen used for drawing the line</param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.GetDisplayText(FFXIMemory.MobData)">
	<summary>
 Gets the mob display text
 </summary>
	<param name="mob">The mob object containig the data</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.GetTargetInfo">
	<summary>
 Gets your current target's data
 </summary>
	<returns>MobData class contianing all the target's info</returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.BuildMobInfo(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Builds the mobs display info
 </summary>
	<param name="mob">The mob object used to get the display info</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.BuildMobInfo(DataLibrary.ApRadarDataSet.MobsRow,System.String)">
	<summary>
 Builds the mobs display info
 </summary>
	<param name="mob">The mob object used to get the display info</param>
	<param name="ClaimedBy">The id of the persont that has the mob claimed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.GetBehavior(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Gets the behavior string for the current target
 </summary>
	<param name="Mob"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.GetDetection(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Builds the detection string for the current target
 </summary>
	<param name="Mob"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.GetClaimedBy(System.Int32)">
	<summary>
 Gets the name of the player that has the mob claimed
 </summary>
	<param name="ClaimID">The ServerID of the player with claim</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.CheckMap">
	<summary>
 Checks for the appropriate map image based on your 
 current coordinates.
 </summary>
	<remarks>This function relies on the map.ini</remarks>
</member><member name="M:RadarControls.RadarRenderer.SerializeSettings(System.String)">
	<summary>
 Serializes the radar settings to a file
 </summary>
	<param name="Path">The path to the setttings file</param>
	<remarks>If the file does not exist it will be created and
 if it does exist it will be overwritten</remarks>
</member><member name="M:RadarControls.RadarRenderer.DeserializeSettings(System.String)">
	<summary>
 Deserializes the radar settings from a file
 </summary>
	<param name="Path">The path of the settings file</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.InitializeRadar(System.Windows.Forms.Form)">
	<summary>
 Initializes the radar starting the scan
 </summary>
	<remarks>This must be called when the radar is started</remarks>
</member><member name="M:RadarControls.RadarRenderer.SaveSettings">
	<summary>
 Saves the settings to the default path
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.SaveSettings(System.String)">
	<summary>
 Saves the settings to the path specified
 </summary>
	<param name="Path"></param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.LoadSettings">
	<summary>
 Loads the settings from the default path
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.LoadSettings(System.String)">
	<summary>
 Loads the setting from the path specified
 </summary>
	<param name="Path"></param>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.Settings_RefreshChanged">
	<summary>
 Event that is fired when the Refresh rate is changed in the settings
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.RadarRenderer.MobScanner">
	<summary>
 Mob scanning thread
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.PaintMappedRadar(System.Drawing.Graphics)">
	<summary>
 Paint method for the mapped radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.PaintMap(System.Drawing.Graphics)">
	<summary>
 Paints the map on the background of the control
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.PaintOverlayRadar(System.Drawing.Graphics)">
	<summary>
 Paint method for painting the overlay radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.PaintHeaderInfo(System.Drawing.Graphics)">
	<summary>
 Paints the current zone information on the radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.PaintMobData(System.Drawing.Graphics,FFXIMemory.MobData,System.Int32,System.Int16)">
	<summary>
 Paints the mob data pane on the window
 </summary>
	<param name="g">the graphics object used for painting</param>
	<param name="Target">The mob Name</param>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.PaintCompass(System.Drawing.Graphics)">
	<summary>
 Paints the compass on the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.PaintMyPointer(System.Drawing.Graphics)">
	<summary>
 Paints the triangle for player position in the center of the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.PaintMob(System.Drawing.Graphics,FFXIMemory.MobData)">
	<summary>
 Paints a mob on the radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<param name="Mob">The mob data to be painted</param>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.PaintRange(System.Drawing.Graphics,System.Single,System.Drawing.Pen)">
	<summary>
 Paints a range on the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<param name="Range">The radius of the range</param>
	<param name="pen">The pen used for drawing the line</param>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.GetDisplayText(FFXIMemory.MobData)">
	<summary>
 Gets the mob display text
 </summary>
	<param name="mob">The mob object containig the data</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.GetTargetInfo">
	<summary>
 Gets your current target's data
 </summary>
	<returns>MobData class contianing all the target's info</returns>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.BuildMobInfo(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Builds the mobs display info
 </summary>
	<param name="mob">The mob object used to get the display info</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.BuildMobInfo(DataLibrary.ApRadarDataSet.MobsRow,System.String)">
	<summary>
 Builds the mobs display info
 </summary>
	<param name="mob">The mob object used to get the display info</param>
	<param name="ClaimedBy">The id of the persont that has the mob claimed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.GetBehavior(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Gets the behavior string for the current target
 </summary>
	<param name="Mob"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.GetDetection(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Builds the detection string for the current target
 </summary>
	<param name="Mob"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.GetClaimedBy(System.Int32)">
	<summary>
 Gets the name of the player that has the mob claimed
 </summary>
	<param name="ClaimID">The ServerID of the player with claim</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.CheckMap">
	<summary>
 Checks for the appropriate map image based on your 
 current coordinates.
 </summary>
	<remarks>This function relies on the map.ini</remarks>
</member><member name="M:RadarControls.Radar.SerializeSettings(System.String)">
	<summary>
 Serializes the radar settings to a file
 </summary>
	<param name="Path">The path to the setttings file</param>
	<remarks>If the file does not exist it will be created and
 if it does exist it will be overwritten</remarks>
</member><member name="M:RadarControls.Radar.DeserializeSettings(System.String)">
	<summary>
 Deserializes the radar settings from a file
 </summary>
	<param name="Path">The path of the settings file</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.InitializeRadar">
	<summary>
 Initializes the radar starting the scan
 </summary>
	<remarks>This must be called when the radar is started</remarks>
</member><member name="M:RadarControls.Radar.SaveSettings">
	<summary>
 Saves the settings to the default path
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.SaveSettings(System.String)">
	<summary>
 Saves the settings to the path specified
 </summary>
	<param name="Path"></param>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.LoadSettings">
	<summary>
 Loads the settings from the default path
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.LoadSettings(System.String)">
	<summary>
 Loads the setting from the path specified
 </summary>
	<param name="Path"></param>
	<remarks></remarks>
</member><member name="M:RadarControls.Radar.Settings_RefreshChanged">
	<summary>
 Event that is fired when the Refresh rate is changed in the settings
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.LayeredForm.CreateGraphics">
	<summary>Creates the System.Drawing.Graphics for the control.</summary>
</member><member name="M:RadarControls.LayeredForm.Update">
	<summary>Causes the control to redraw the invalidated regions within its client area.</summary>
</member><member name="M:RadarControls.MapRadar.PaintMappedRadar(System.Drawing.Graphics)">
	<summary>
 Paint method for the mapped radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.MapRadar.PaintMap(System.Drawing.Graphics)">
	<summary>
 Paints the map on the background of the control
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.MapRadar.CheckMap">
	<summary>
 Checks for the appropriate map image based on your 
 current coordinates.
 </summary>
	<remarks>This function relies on the map.ini</remarks>
</member><member name="P:RadarControls.PartyEntry.MemoryObject">
	<summary>
 The memory object used to get the data for this mob
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:RadarControls.PartyEntry.MobBase">
	<summary>
 The base address of the mobs structure
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.WindowerOverlay.DeserializeSettings(System.String)">
	<summary>
 Deserializes the radar settings from a file
 </summary>
	<param name="Path">The path of the settings file</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.WindowerOverlay.MobScanner">
	<summary>
 Mob scanning thread
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.PaintMappedRadar(System.Drawing.Graphics)">
	<summary>
 Paint method for the mapped radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.PaintMap(System.Drawing.Graphics)">
	<summary>
 Paints the map on the background of the control
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.PaintOverlayRadar(System.Drawing.Graphics)">
	<summary>
 Paint method for painting the overlay radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.PaintHeaderInfo(System.Drawing.Graphics)">
	<summary>
 Paints the current zone information on the radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.PaintMobData(System.Drawing.Graphics,FFXIMemory.MobData,System.Int32,System.Int16)">
	<summary>
 Paints the mob data pane on the window
 </summary>
	<param name="g">the graphics object used for painting</param>
	<param name="Target">The mob Name</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.PaintCompass(System.Drawing.Graphics)">
	<summary>
 Paints the compass on the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.PaintMyPointer(System.Drawing.Graphics)">
	<summary>
 Paints the triangle for player position in the center of the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.PaintMob(System.Drawing.Graphics,FFXIMemory.MobData,System.Boolean)">
	<summary>
 Paints a mob on the radar
 </summary>
	<param name="g">The graphics object to use for painting</param>
	<param name="Mob">The mob data to be painted</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.PaintRange(System.Drawing.Graphics,System.Single,System.Drawing.Pen)">
	<summary>
 Paints a range on the radar
 </summary>
	<param name="g">The graphics object used for painting</param>
	<param name="Range">The radius of the range</param>
	<param name="pen">The pen used for drawing the line</param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.ProcessMobList(FFXIMemory.MobList)">
	<summary>
 Processes the incoming mob list and filters out mobs that should not be shown
 </summary>
	<param name="InMobs">The incoming mob list</param>
</member><member name="M:RadarControls.AlphaRadarRenderer.GetDisplayText(FFXIMemory.MobData)">
	<summary>
 Gets the mob display text
 </summary>
	<param name="mob">The mob object containig the data</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.GetTargetInfo">
	<summary>
 Gets your current target's data
 </summary>
	<returns>MobData class contianing all the target's info</returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.BuildMobInfo(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Builds the mobs display info
 </summary>
	<param name="mob">The mob object used to get the display info</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.BuildMobInfo(DataLibrary.ApRadarDataSet.MobsRow,System.String)">
	<summary>
 Builds the mobs display info
 </summary>
	<param name="mob">The mob object used to get the display info</param>
	<param name="ClaimedBy">The id of the persont that has the mob claimed</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.GetBehavior(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Gets the behavior string for the current target
 </summary>
	<param name="Mob"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.GetDetection(DataLibrary.ApRadarDataSet.MobsRow)">
	<summary>
 Builds the detection string for the current target
 </summary>
	<param name="Mob"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.GetClaimedBy(System.Int32)">
	<summary>
 Gets the name of the player that has the mob claimed
 </summary>
	<param name="ClaimID">The ServerID of the player with claim</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.CheckMap">
	<summary>
 Checks for the appropriate map image based on your 
 current coordinates.
 </summary>
	<remarks>This function relies on the map.ini</remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.SerializeSettings(System.String)">
	<summary>
 Serializes the radar settings to a file
 </summary>
	<param name="Path">The path to the setttings file</param>
	<remarks>If the file does not exist it will be created and
 if it does exist it will be overwritten</remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.DeserializeSettings(System.String)">
	<summary>
 Deserializes the radar settings from a file
 </summary>
	<param name="Path">The path of the settings file</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.InitializeRadar(RadarControls.LayeredForm)">
	<summary>
 Initializes the radar starting the scan
 </summary>
	<remarks>This must be called when the radar is started</remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.SaveSettings">
	<summary>
 Saves the settings to the default path
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.SaveSettings(System.String)">
	<summary>
 Saves the settings to the path specified
 </summary>
	<param name="Path"></param>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.LoadSettings">
	<summary>
 Loads the settings from the default path
 </summary>
	<remarks></remarks>
</member><member name="M:RadarControls.AlphaRadarRenderer.LoadSettings(System.String)">
	<summary>
 Loads the setting from the path specified
 </summary>
	<param name="Path"></param>
	<remarks></remarks>
</member>
</members>
</doc>